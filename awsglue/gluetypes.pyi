from awsglue.utils import iteritems as iteritems
from typing import Any

basestring = str
unicode = str

class DataType:
    properties: Any
    def __init__(self, properties=...) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    @classmethod
    def typeName(cls): ...
    def jsonValue(self): ...

class AtomicType(DataType):
    @classmethod
    def fromJsonValue(cls, json_value): ...

class BinaryType(AtomicType): ...
class BooleanType(AtomicType): ...
class ByteType(AtomicType): ...
class DateType(AtomicType): ...

class DecimalType(AtomicType):
    precision: Any
    scale: Any
    def __init__(self, precision: int = ..., scale: int = ..., properties=...) -> None: ...
    def jsonValue(self): ...

class DoubleType(AtomicType): ...

class EnumType(AtomicType):
    options: Any
    def __init__(self, options, properties=...) -> None: ...
    def jsonValue(self) -> None: ...

class FloatType(AtomicType): ...

class IntegerType(AtomicType):
    @classmethod
    def typeName(cls): ...

class LongType(AtomicType): ...
class NullType(AtomicType): ...
class ShortType(AtomicType): ...
class StringType(AtomicType): ...
class TimestampType(AtomicType): ...
class UnknownType(AtomicType): ...

class ArrayType(DataType):
    elementType: Any
    def __init__(self, elementType=..., properties=...) -> None: ...
    def jsonValue(self): ...
    @classmethod
    def fromJsonValue(cls, json_value): ...

class SetType(DataType):
    elementType: Any
    def __init__(self, elementType=..., properties=...) -> None: ...
    def jsonValue(self): ...
    @classmethod
    def fromJsonValue(cls, json_value): ...

class ChoiceType(DataType):
    choices: Any
    def __init__(self, choices=..., properties=...) -> None: ...
    def add(self, new_choice) -> None: ...
    def merge(self, new_choices) -> None: ...
    def jsonValue(self): ...
    @classmethod
    def fromJsonValue(cls, json_value): ...

class MapType(DataType):
    valueType: Any
    def __init__(self, valueType=..., properties=...) -> None: ...
    def jsonValue(self): ...
    @classmethod
    def fromJsonValue(cls, json_value): ...

class Field:
    name: Any
    dataType: Any
    properties: Any
    def __init__(self, name, dataType, properties=...) -> None: ...
    def __eq__(self, other): ...
    def jsonValue(self): ...
    @classmethod
    def fromJsonValue(cls, json_value): ...

class StructType(DataType):
    fields: Any
    field_map: Any
    def __init__(self, fields=..., properties=...) -> None: ...
    def __iter__(self): ...
    def add(self, field) -> None: ...
    def hasField(self, field): ...
    def getField(self, field): ...
    def jsonValue(self): ...
    @classmethod
    def fromJsonValue(cls, json_value): ...

class EntityType(DataType):
    def __init__(self, entity, base_type, properties) -> None: ...

def mergeDataTypes(s1, s2): ...

class DynamicRecord(dict):
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value) -> None: ...
